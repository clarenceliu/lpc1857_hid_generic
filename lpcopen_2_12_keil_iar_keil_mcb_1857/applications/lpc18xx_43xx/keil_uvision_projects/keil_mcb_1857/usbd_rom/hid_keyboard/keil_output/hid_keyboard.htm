<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\keil_output\hid_keyboard.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\keil_output\hid_keyboard.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Fri Mar 27 10:13:39 2015
<BR><P>
<H3>Maximum Stack Usage =        200 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; Board_Init &rArr; Board_Debug_Init &rArr; Chip_UART_SetBaud &rArr; Chip_Clock_GetRate &rArr; Chip_Clock_GetBaseClocktHz &rArr; Chip_Clock_GetClockInputHz &rArr; Chip_Clock_GetMainPLLHz &rArr;  Chip_Clock_GetClockInputHz (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[58]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[5]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">NMI_Handler</a><BR>
 <LI><a href="#[6]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">HardFault_Handler</a><BR>
 <LI><a href="#[7]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">MemManage_Handler</a><BR>
 <LI><a href="#[8]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">BusFault_Handler</a><BR>
 <LI><a href="#[9]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">UsageFault_Handler</a><BR>
 <LI><a href="#[b]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">SVC_Handler</a><BR>
 <LI><a href="#[c]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">DebugMon_Handler</a><BR>
 <LI><a href="#[d]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">PendSV_Handler</a><BR>
 <LI><a href="#[e]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">SysTick_Handler</a><BR>
 <LI><a href="#[a]">UnHandled_Vector</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">UnHandled_Vector</a><BR>
 <LI><a href="#[1f]">ADC0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">ADC0_IRQHandler</a><BR>
 <LI><a href="#[77]">Chip_Clock_GetMainPLLHz</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[76]">Chip_Clock_GetClockInputHz</a><BR>
 <LI><a href="#[78]">Chip_Clock_GetDivRate</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[76]">Chip_Clock_GetClockInputHz</a><BR>
 <LI><a href="#[56]">_sys_exit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[56]">_sys_exit</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1f]">ADC0_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[23]">ADC1_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[3a]">ADCHS_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[3b]">ATIMER_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[8]">BusFault_Handler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[3f]">CAN0_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[39]">CAN1_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[f]">DAC_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[11]">DMA_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[c]">DebugMon_Handler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[46]">EP0_patch</a> from hid_main.o(i.EP0_patch) referenced from hid_main.o(i.main)
 <LI><a href="#[13]">ETH_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[38]">EVRT_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[12]">FLASH_EEPROM_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[36]">GINT0_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[37]">GINT1_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[2e]">GPIO0_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[2f]">GPIO1_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[30]">GPIO2_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[31]">GPIO3_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[32]">GPIO4_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[33]">GPIO5_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[34]">GPIO6_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[35]">GPIO7_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[6]">HardFault_Handler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[20]">I2C0_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[21]">I2C1_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[2a]">I2S0_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[2b]">I2S1_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[45]">Keyboard_EpIN_Hdlr</a> from hid_keyboard.o(i.Keyboard_EpIN_Hdlr) referenced from hid_keyboard.o(i.Keyboard_init)
 <LI><a href="#[43]">Keyboard_GetReport</a> from hid_keyboard.o(i.Keyboard_GetReport) referenced from hid_keyboard.o(i.Keyboard_init)
 <LI><a href="#[44]">Keyboard_SetReport</a> from hid_keyboard.o(i.Keyboard_SetReport) referenced from hid_keyboard.o(i.Keyboard_init)
 <LI><a href="#[15]">LCD_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[10]">M0APP_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[3e]">M0SUB_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[1e]">MCPWM_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[7]">MemManage_Handler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[5]">NMI_Handler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[d]">PendSV_Handler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[40]">QEI_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[19]">RIT_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[3c]">RTC_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[4]">Reset_Handler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[18]">SCT_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[14]">SDIO_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[2d]">SGPIO_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[2c]">SPIFI_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[22]">SPI_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[24]">SSP0_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[25]">SSP1_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[b]">SVC_Handler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[e]">SysTick_Handler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[41]">SystemInit</a> from sysinit.o(i.SystemInit) referenced from keil_startup_lpc18xx43xx.o(.text)
 <LI><a href="#[1a]">TIMER0_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[1b]">TIMER1_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[1c]">TIMER2_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[1d]">TIMER3_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[26]">UART0_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[27]">UART1_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[28]">UART2_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[29]">UART3_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[16]">USB0_IRQHandler</a> from hid_main.o(i.USB0_IRQHandler) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[17]">USB1_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[a]">UnHandled_Vector</a> from keil_startup_lpc18xx43xx.o(.text) referenced 7 times from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[9]">UsageFault_Handler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[3d]">WDT_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[47]">__main</a> from __main.o(!!!main) referenced from keil_startup_lpc18xx43xx.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[47]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[48]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[4a]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[93]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[94]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[4b]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[95]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[4f]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[96]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[97]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[98]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[99]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[9a]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[9b]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[9c]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[9d]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[9e]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[9f]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[a0]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[a1]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[a2]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[a3]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[a4]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[a5]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[a6]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[a7]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[a8]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[a9]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[54]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[aa]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[ab]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[ac]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[ad]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[ae]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[af]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[49]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[b0]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[4c]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[4e]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[b1]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[50]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Board_Init &rArr; Board_Debug_Init &rArr; Chip_UART_SetBaud &rArr; Chip_Clock_GetRate &rArr; Chip_Clock_GetBaseClocktHz &rArr; Chip_Clock_GetClockInputHz &rArr; Chip_Clock_GetMainPLLHz &rArr;  Chip_Clock_GetClockInputHz (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[b2]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[59]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[53]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[b3]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[55]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[4]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>UnHandled_Vector</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnHandled_Vector
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnHandled_Vector
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ADC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>ADCHS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>ATIMER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>CAN0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>CAN1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>EVRT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>FLASH_EEPROM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>GINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>GINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>GPIO0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>GPIO1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>GPIO2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>GPIO3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>GPIO4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>GPIO5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>GPIO6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>GPIO7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2S0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2S1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>M0APP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>M0SUB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>RIT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>SCT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SGPIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>SPIFI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>USB1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, keil_startup_lpc18xx43xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[90]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_init
</UL>

<P><STRONG><a name="[b4]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[52]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[ba]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[bb]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>Board_Buttons_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, board.o(i.Board_Buttons_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Board_Buttons_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SCU_PinMuxSet
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_SetPinDIRInput
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_init
</UL>

<P><STRONG><a name="[5d]"></a>Board_Debug_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, board.o(i.Board_Debug_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Board_Debug_Init &rArr; Chip_UART_SetBaud &rArr; Chip_Clock_GetRate &rArr; Chip_Clock_GetBaseClocktHz &rArr; Chip_Clock_GetClockInputHz &rArr; Chip_Clock_GetMainPLLHz &rArr;  Chip_Clock_GetClockInputHz (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SetBaud
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_Init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[61]"></a>Board_Init</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, board.o(i.Board_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Board_Init &rArr; Board_Debug_Init &rArr; Chip_UART_SetBaud &rArr; Chip_Clock_GetRate &rArr; Chip_Clock_GetBaseClocktHz &rArr; Chip_Clock_GetClockInputHz &rArr; Chip_Clock_GetMainPLLHz &rArr;  Chip_Clock_GetClockInputHz (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SCU_PinMuxSet
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_SetPinDIROutput
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Debug_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[64]"></a>Board_Joystick_Init</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, board.o(i.Board_Joystick_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Board_Joystick_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SCU_PinMuxSet
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_SetPinDIRInput
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_init
</UL>

<P><STRONG><a name="[8d]"></a>Board_LED_Set</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, board.o(i.Board_LED_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Board_LED_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_SetReport
</UL>

<P><STRONG><a name="[65]"></a>Board_SetupClocking</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, board_sysinit.o(i.Board_SetupClocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Board_SetupClocking &rArr; Chip_SetupCoreClock &rArr; Chip_Clock_SetupMainPLLHz &rArr; Chip_Clock_SetupMainPLLMult &rArr; Chip_Clock_GetClockInputHz &rArr; Chip_Clock_GetMainPLLHz &rArr;  Chip_Clock_GetClockInputHz (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_SetDivider
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_SetBaseClock
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SetupCoreClock
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SystemInit
</UL>

<P><STRONG><a name="[69]"></a>Board_SetupExtMemory</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, board_sysinit.o(i.Board_SetupExtMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Board_SetupExtMemory &rArr; Chip_EMC_Static_Init &rArr; Chip_Clock_GetEMCRate &rArr; Chip_Clock_GetRate &rArr; Chip_Clock_GetBaseClocktHz &rArr; Chip_Clock_GetClockInputHz &rArr; Chip_Clock_GetMainPLLHz &rArr;  Chip_Clock_GetClockInputHz (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_EnableOpts
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_EMC_Static_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_EMC_Init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_EMC_Dynamic_Init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SystemInit
</UL>

<P><STRONG><a name="[6f]"></a>Board_SetupMuxing</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, board_sysinit.o(i.Board_SetupMuxing))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Board_SetupMuxing &rArr; Chip_SCU_SetPinMuxing
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SCU_SetPinMuxing
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SystemInit
</UL>

<P><STRONG><a name="[71]"></a>Board_SystemInit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, board_sysinit.o(i.Board_SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Board_SystemInit &rArr; Board_SetupClocking &rArr; Chip_SetupCoreClock &rArr; Chip_Clock_SetupMainPLLHz &rArr; Chip_Clock_SetupMainPLLMult &rArr; Chip_Clock_GetClockInputHz &rArr; Chip_Clock_GetMainPLLHz &rArr;  Chip_Clock_GetClockInputHz (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SetupMuxing
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SetupExtMemory
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SetupClocking
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[5e]"></a>Board_UART_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, board.o(i.Board_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Board_UART_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SCU_PinMuxSet
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Debug_Init
</UL>

<P><STRONG><a name="[72]"></a>Buttons_GetStatus</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, board.o(i.Buttons_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Buttons_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_GetPinState
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_UpdateReport
</UL>

<P><STRONG><a name="[80]"></a>Chip_Clock_DisableMainPLL</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, clock_18xx_43xx.o(i.Chip_Clock_DisableMainPLL))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_SetupMainPLLMult
</UL>

<P><STRONG><a name="[6b]"></a>Chip_Clock_Enable</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, clock_18xx_43xx.o(i.Chip_Clock_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SetupExtMemory
</UL>

<P><STRONG><a name="[87]"></a>Chip_Clock_EnableBaseClock</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, clock_18xx_43xx.o(i.Chip_Clock_EnableBaseClock))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_USB0_Init
</UL>

<P><STRONG><a name="[83]"></a>Chip_Clock_EnableCrystal</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, clock_18xx_43xx.o(i.Chip_Clock_EnableCrystal))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Chip_Clock_EnableCrystal
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SetupCoreClock
</UL>

<P><STRONG><a name="[6a]"></a>Chip_Clock_EnableOpts</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, clock_18xx_43xx.o(i.Chip_Clock_EnableOpts))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Chip_Clock_EnableOpts
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_USB0_Init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SetupExtMemory
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_Init
</UL>

<P><STRONG><a name="[89]"></a>Chip_Clock_EnablePLL</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, clock_18xx_43xx.o(i.Chip_Clock_EnablePLL))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_USB_PllSetup
</UL>

<P><STRONG><a name="[75]"></a>Chip_Clock_GetBaseClock</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, clock_18xx_43xx.o(i.Chip_Clock_GetBaseClock))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetBaseClocktHz
</UL>

<P><STRONG><a name="[74]"></a>Chip_Clock_GetBaseClocktHz</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, clock_18xx_43xx.o(i.Chip_Clock_GetBaseClocktHz))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Chip_Clock_GetBaseClocktHz &rArr; Chip_Clock_GetClockInputHz &rArr; Chip_Clock_GetMainPLLHz &rArr;  Chip_Clock_GetClockInputHz (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetClockInputHz
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetBaseClock
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetRate
</UL>

<P><STRONG><a name="[76]"></a>Chip_Clock_GetClockInputHz</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, clock_18xx_43xx.o(i.Chip_Clock_GetClockInputHz))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Chip_Clock_GetClockInputHz &rArr; Chip_Clock_GetMainPLLHz &rArr;  Chip_Clock_GetClockInputHz (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetMainPLLHz
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetDivRate
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_USB_PllSetup
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_SetupMainPLLMult
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_SetupMainPLLHz
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetMainPLLHz
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetBaseClocktHz
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetDivRate
</UL>

<P><STRONG><a name="[7a]"></a>Chip_Clock_GetDividerDivisor</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, clock_18xx_43xx.o(i.Chip_Clock_GetDividerDivisor))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetDivRate
</UL>

<P><STRONG><a name="[79]"></a>Chip_Clock_GetDividerSource</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, clock_18xx_43xx.o(i.Chip_Clock_GetDividerSource))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetDivRate
</UL>

<P><STRONG><a name="[7b]"></a>Chip_Clock_GetEMCRate</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, clock_18xx_43xx.o(i.Chip_Clock_GetEMCRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Chip_Clock_GetEMCRate &rArr; Chip_Clock_GetRate &rArr; Chip_Clock_GetBaseClocktHz &rArr; Chip_Clock_GetClockInputHz &rArr; Chip_Clock_GetMainPLLHz &rArr;  Chip_Clock_GetClockInputHz (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetRate
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_EMC_Static_Init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_EMC_Dynamic_Init
</UL>

<P><STRONG><a name="[77]"></a>Chip_Clock_GetMainPLLHz</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, clock_18xx_43xx.o(i.Chip_Clock_GetMainPLLHz))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = Chip_Clock_GetMainPLLHz &rArr;  Chip_Clock_GetClockInputHz (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetClockInputHz
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetClockInputHz
</UL>

<P><STRONG><a name="[8a]"></a>Chip_Clock_GetPLLStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, clock_18xx_43xx.o(i.Chip_Clock_GetPLLStatus))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_USB_PllSetup
</UL>

<P><STRONG><a name="[7c]"></a>Chip_Clock_GetRate</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, clock_18xx_43xx.o(i.Chip_Clock_GetRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Chip_Clock_GetRate &rArr; Chip_Clock_GetBaseClocktHz &rArr; Chip_Clock_GetClockInputHz &rArr; Chip_Clock_GetMainPLLHz &rArr;  Chip_Clock_GetClockInputHz (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetBaseClocktHz
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetEMCRate
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SetBaud
</UL>

<P><STRONG><a name="[67]"></a>Chip_Clock_SetBaseClock</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, clock_18xx_43xx.o(i.Chip_Clock_SetBaseClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Chip_Clock_SetBaseClock
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_USB0_Init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SetupCoreClock
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SetupClocking
</UL>

<P><STRONG><a name="[68]"></a>Chip_Clock_SetDivider</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, clock_18xx_43xx.o(i.Chip_Clock_SetDivider))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Chip_Clock_SetDivider
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SetupClocking
</UL>

<P><STRONG><a name="[7d]"></a>Chip_Clock_SetupMainPLLHz</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, clock_18xx_43xx.o(i.Chip_Clock_SetupMainPLLHz))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Chip_Clock_SetupMainPLLHz &rArr; Chip_Clock_SetupMainPLLMult &rArr; Chip_Clock_GetClockInputHz &rArr; Chip_Clock_GetMainPLLHz &rArr;  Chip_Clock_GetClockInputHz (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetClockInputHz
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_SetupMainPLLMult
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_TestMainPLLMultiplier
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SetupCoreClock
</UL>

<P><STRONG><a name="[7f]"></a>Chip_Clock_SetupMainPLLMult</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, clock_18xx_43xx.o(i.Chip_Clock_SetupMainPLLMult))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Chip_Clock_SetupMainPLLMult &rArr; Chip_Clock_GetClockInputHz &rArr; Chip_Clock_GetMainPLLHz &rArr;  Chip_Clock_GetClockInputHz (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetClockInputHz
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_DisableMainPLL
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_SetupMainPLLHz
</UL>

<P><STRONG><a name="[88]"></a>Chip_Clock_SetupPLL</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, clock_18xx_43xx.o(i.Chip_Clock_SetupPLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Chip_Clock_SetupPLL
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_USB_PllSetup
</UL>

<P><STRONG><a name="[6d]"></a>Chip_EMC_Dynamic_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, emc_18xx_43xx.o(i.Chip_EMC_Dynamic_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Chip_EMC_Dynamic_Init &rArr; Chip_Clock_GetEMCRate &rArr; Chip_Clock_GetRate &rArr; Chip_Clock_GetBaseClocktHz &rArr; Chip_Clock_GetClockInputHz &rArr; Chip_Clock_GetMainPLLHz &rArr;  Chip_Clock_GetClockInputHz (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDynMem
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetEMCRate
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SetupExtMemory
</UL>

<P><STRONG><a name="[6c]"></a>Chip_EMC_Init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, emc_18xx_43xx.o(i.Chip_EMC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SetupExtMemory
</UL>

<P><STRONG><a name="[6e]"></a>Chip_EMC_Static_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, emc_18xx_43xx.o(i.Chip_EMC_Static_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Chip_EMC_Static_Init &rArr; Chip_Clock_GetEMCRate &rArr; Chip_Clock_GetRate &rArr; Chip_Clock_GetBaseClocktHz &rArr; Chip_Clock_GetClockInputHz &rArr; Chip_Clock_GetMainPLLHz &rArr;  Chip_Clock_GetClockInputHz (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initStaticMem
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetEMCRate
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SetupExtMemory
</UL>

<P><STRONG><a name="[62]"></a>Chip_GPIO_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gpio_18xx_43xx.o(i.Chip_GPIO_Init))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[66]"></a>Chip_SetupCoreClock</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, sysinit_18xx_43xx.o(i.Chip_SetupCoreClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Chip_SetupCoreClock &rArr; Chip_Clock_SetupMainPLLHz &rArr; Chip_Clock_SetupMainPLLMult &rArr; Chip_Clock_GetClockInputHz &rArr; Chip_Clock_GetMainPLLHz &rArr;  Chip_Clock_GetClockInputHz (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_SetBaseClock
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_SetupMainPLLHz
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_EnableCrystal
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SetupClocking
</UL>

<P><STRONG><a name="[5f]"></a>Chip_UART_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, uart_18xx_43xx.o(i.Chip_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Chip_UART_Init &rArr; Chip_Clock_EnableOpts
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_EnableOpts
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_GetClockIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Debug_Init
</UL>

<P><STRONG><a name="[60]"></a>Chip_UART_SetBaud</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, uart_18xx_43xx.o(i.Chip_UART_SetBaud))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Chip_UART_SetBaud &rArr; Chip_Clock_GetRate &rArr; Chip_Clock_GetBaseClocktHz &rArr; Chip_Clock_GetClockInputHz &rArr; Chip_Clock_GetMainPLLHz &rArr;  Chip_Clock_GetClockInputHz (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetRate
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_GetClockIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Debug_Init
</UL>

<P><STRONG><a name="[85]"></a>Chip_USB0_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, chip_18xx_43xx.o(i.Chip_USB0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Chip_USB0_Init &rArr; Chip_USB_PllSetup &rArr; Chip_Clock_GetClockInputHz &rArr; Chip_Clock_GetMainPLLHz &rArr;  Chip_Clock_GetClockInputHz (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_SetBaseClock
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_EnableOpts
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_EnableBaseClock
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_USB_PllSetup
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[46]"></a>EP0_patch</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hid_main.o(i.EP0_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EP0_patch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hid_main.o(i.main)
</UL>
<P><STRONG><a name="[8b]"></a>Joystick_GetStatus</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, board.o(i.Joystick_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Joystick_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_GetPinState
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_UpdateReport
</UL>

<P><STRONG><a name="[8e]"></a>Keyboard_Tasks</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, hid_keyboard.o(i.Keyboard_Tasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Keyboard_Tasks &rArr; Keyboard_UpdateReport &rArr; Joystick_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_UpdateReport
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8f]"></a>Keyboard_init</STRONG> (Thumb, 124 bytes, Stack size 88 bytes, hid_keyboard.o(i.Keyboard_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Keyboard_init &rArr; Board_Joystick_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Joystick_Init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Buttons_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[91]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, chip_18xx_43xx.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SystemCoreClockUpdate &rArr; Chip_Clock_GetRate &rArr; Chip_Clock_GetBaseClocktHz &rArr; Chip_Clock_GetClockInputHz &rArr; Chip_Clock_GetMainPLLHz &rArr;  Chip_Clock_GetClockInputHz (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetRate
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[41]"></a>SystemInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sysinit.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SystemInit &rArr; Board_SystemInit &rArr; Board_SetupClocking &rArr; Chip_SetupCoreClock &rArr; Chip_Clock_SetupMainPLLHz &rArr; Chip_Clock_SetupMainPLLMult &rArr; Chip_Clock_GetClockInputHz &rArr; Chip_Clock_GetMainPLLHz &rArr;  Chip_Clock_GetClockInputHz (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(.text)
</UL>
<P><STRONG><a name="[16]"></a>USB0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hid_main.o(i.USB0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, board.o(i._sys_exit))
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[81]"></a>initDynMem</STRONG> (Thumb, 406 bytes, Stack size 24 bytes, emc_18xx_43xx.o(i.initDynMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = initDynMem
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertTimmingParam
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_EMC_Dynamic_Init
</UL>

<P><STRONG><a name="[82]"></a>initStaticMem</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, emc_18xx_43xx.o(i.initStaticMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = initStaticMem
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertTimmingParam
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_EMC_Static_Init
</UL>

<P><STRONG><a name="[51]"></a>main</STRONG> (Thumb, 140 bytes, Stack size 88 bytes, hid_main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = main &rArr; Board_Init &rArr; Board_Debug_Init &rArr; Chip_UART_SetBaud &rArr; Chip_Clock_GetRate &rArr; Chip_Clock_GetBaseClocktHz &rArr; Chip_Clock_GetClockInputHz &rArr; Chip_Clock_GetMainPLLHz &rArr;  Chip_Clock_GetClockInputHz (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_USB0_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Tasks
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[45]"></a>Keyboard_EpIN_Hdlr</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hid_keyboard.o(i.Keyboard_EpIN_Hdlr))
<BR>[Address Reference Count : 1]<UL><LI> hid_keyboard.o(i.Keyboard_init)
</UL>
<P><STRONG><a name="[43]"></a>Keyboard_GetReport</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, hid_keyboard.o(i.Keyboard_GetReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Keyboard_GetReport &rArr; Keyboard_UpdateReport &rArr; Joystick_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_UpdateReport
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hid_keyboard.o(i.Keyboard_init)
</UL>
<P><STRONG><a name="[44]"></a>Keyboard_SetReport</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, hid_keyboard.o(i.Keyboard_SetReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Keyboard_SetReport &rArr; Board_LED_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_LED_Set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hid_keyboard.o(i.Keyboard_init)
</UL>
<P><STRONG><a name="[8c]"></a>Keyboard_UpdateReport</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, hid_keyboard.o(i.Keyboard_UpdateReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Keyboard_UpdateReport &rArr; Joystick_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick_GetStatus
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buttons_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Tasks
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_GetReport
</UL>

<P><STRONG><a name="[86]"></a>Chip_USB_PllSetup</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, chip_18xx_43xx.o(i.Chip_USB_PllSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Chip_USB_PllSetup &rArr; Chip_Clock_GetClockInputHz &rArr; Chip_Clock_GetMainPLLHz &rArr;  Chip_Clock_GetClockInputHz (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_SetupPLL
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetPLLStatus
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetClockInputHz
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_EnablePLL
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_USB0_Init
</UL>

<P><STRONG><a name="[73]"></a>Chip_GPIO_GetPinState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, board.o(i.Chip_GPIO_GetPinState))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick_GetStatus
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buttons_GetStatus
</UL>

<P><STRONG><a name="[5c]"></a>Chip_GPIO_SetPinDIRInput</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, board.o(i.Chip_GPIO_SetPinDIRInput))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Joystick_Init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Buttons_Init
</UL>

<P><STRONG><a name="[63]"></a>Chip_GPIO_SetPinDIROutput</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, board.o(i.Chip_GPIO_SetPinDIROutput))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[5b]"></a>Chip_SCU_PinMuxSet</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, board.o(i.Chip_SCU_PinMuxSet))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Joystick_Init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Buttons_Init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_UART_Init
</UL>

<P><STRONG><a name="[70]"></a>Chip_SCU_SetPinMuxing</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, board_sysinit.o(i.Chip_SCU_SetPinMuxing))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Chip_SCU_SetPinMuxing
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SetupMuxing
</UL>

<P><STRONG><a name="[78]"></a>Chip_Clock_GetDivRate</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, clock_18xx_43xx.o(i.Chip_Clock_GetDivRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = Chip_Clock_GetDivRate &rArr;  Chip_Clock_GetClockInputHz (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetClockInputHz
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetDividerSource
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetDividerDivisor
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetClockInputHz
</UL>

<P><STRONG><a name="[7e]"></a>Chip_Clock_TestMainPLLMultiplier</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, clock_18xx_43xx.o(i.Chip_Clock_TestMainPLLMultiplier))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_SetupMainPLLHz
</UL>

<P><STRONG><a name="[92]"></a>convertTimmingParam</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, emc_18xx_43xx.o(i.convertTimmingParam))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initStaticMem
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDynMem
</UL>

<P><STRONG><a name="[84]"></a>Chip_UART_GetClockIndex</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, uart_18xx_43xx.o(i.Chip_UART_GetClockIndex))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SetBaud
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_Init
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
